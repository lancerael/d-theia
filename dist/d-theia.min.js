var Theia =
webpackJsonpTheia([0],{

/***/ 173:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _d = __webpack_require__(10);

var d3 = _interopRequireWildcard(_d);

var _chart = __webpack_require__(174);

var _chart2 = _interopRequireDefault(_chart);

var _key = __webpack_require__(175);

var _key2 = _interopRequireDefault(_key);

var _axis = __webpack_require__(176);

var _axis2 = _interopRequireDefault(_axis);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* Create AxisChart from the supplied data, based on the supplied JSON config.
*
* @class AxisChart
* @extends Chart
* @constructor
*/
var AxisChart = function (_Chart) {
  _inherits(AxisChart, _Chart);

  /**
  * Constructor function supersedes parent class.
  *
  * @method constructor
  * @param {Object} oParams same as Chart
  */
  function AxisChart() {
    var oParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AxisChart);

    var _this = _possibleConstructorReturn(this, (AxisChart.__proto__ || Object.getPrototypeOf(AxisChart)).call(this, oParams));

    _this.jPadding = { l: 45, r: 15, t: 25, b: 90 };
    _this.oScaleX = d3.scaleBand().padding(0.2);
    _this.oScaleY = d3.scaleLinear();
    return _this;
  }

  /**
  * Supersede the parent method to update local scaling objects
  *
  * @method setDimensions
  */


  _createClass(AxisChart, [{
    key: 'setDimensions',
    value: function setDimensions() {
      _get(AxisChart.prototype.__proto__ || Object.getPrototypeOf(AxisChart.prototype), 'setDimensions', this).call(this);
      this.oScaleX.domain(this.aData.map(function (d) {
        return d.sLabel;
      })).range([0, this.iInnerWidth]);
      this.oScaleY.domain([0, d3.max(this.aData, function (d) {
        return d3.max(d.aValues);
      })]).range([this.iInnerHeight, this.jPadding.t]);
    }

    /**
    * Render the chart including axes and labels
    *
    * @method renderChart
    */

  }, {
    key: 'renderChart',
    value: function renderChart() {
      var _jConfig = this.jConfig,
          aAxisLabels = _jConfig.aAxisLabels,
          iTruncate = _jConfig.iTruncate;
      var iInnerWidth = this.iInnerWidth,
          iInnerHeight = this.iInnerHeight,
          oScaleX = this.oScaleX,
          oScaleY = this.oScaleY,
          jPadding = this.jPadding;

      // Add chart scale axes

      this.d3AxisGroup = this.d3AxisGroup || this.d3Svg.append('g').attr('class', 'axes-g');
      this.oAxis = new _axis2.default({
        d3Container: this.d3AxisGroup,
        iTruncate: iTruncate,
        aAxisLabels: aAxisLabels,
        oScaleX: oScaleX,
        oScaleY: oScaleY,
        jPadding: jPadding,
        iWidth: iInnerWidth,
        iHeight: iInnerHeight,
        oToolTip: this.oToolTip }).render();

      // Add chart container group
      this.d3ChartGroup = this.d3ChartGroup || this.d3Svg.append('g').attr('transform', 'translate(' + this.jPadding.l + ', 0)');

      // Render the key for the data
      this.oKey = new _key2.default({
        d3Container: d3.select(this.oSvg),
        aValues: this.jConfig.aValues,
        iOffsetX: this.iInnerWidth / 2 + this.jPadding.l,
        iOffsetY: this.iHeight - 20
      }).render();
    }
  }]);

  return AxisChart;
}(_chart2.default);

exports.default = AxisChart;


module.exports = AxisChart;

/***/ }),

/***/ 174:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = __webpack_require__(10);

var d3 = _interopRequireWildcard(_d);

var _tooltip = __webpack_require__(469);

var _tooltip2 = _interopRequireDefault(_tooltip);

var _colors = __webpack_require__(470);

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Chart object is the parent class for all types of Chart.
*
* @class Chart
* @constructor
*/
var Chart = function () {

  /**
  * Constructor function that sets up the local object.
  *
  * @method constructor
  * @param {JSON Object} jConfig JSON configuration object
  * @param {Array} aData the data to be displayed
  * @param {String} sContainer Optional ID to select DOM object
  * @param {DOM Element} dContainer Optional DOM object in place of ID
  */
  function Chart(_ref) {
    var jConfig = _ref.jConfig,
        aData = _ref.aData,
        sContainer = _ref.sContainer,
        dContainer = _ref.dContainer;

    _classCallCheck(this, Chart);

    this.oSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    this.d3Svg = d3.select(this.oSvg);
    this.iTransitionTime = 500;
    this.jPadding = { l: 5, r: 5, t: 5, b: 5 };
    this.dLoader = document.createElement('div');
    this.dLoader.className = 'dt-loader';
    if (!dContainer && sContainer) {
      dContainer = document.getElementById(sContainer);
      if (!dContainer.nodeName) {
        throw new Error('No valid element ID provided for chart.');
      }
    }
    if (dContainer) {
      this.setContainer(dContainer);
    }
    if (jConfig) {
      this.setConfig(jConfig);
    }
    if (aData) {
      this.setData(aData);
    }
  }

  /**
  * Sets the local container object.
  *
  * @method setContainer
  * @param {DOM Element} dContainer Required DOM element
  * @throws {Error} invalid DOM element
  */


  _createClass(Chart, [{
    key: 'setContainer',
    value: function setContainer(dContainer) {
      if (dContainer.nodeName) {
        dContainer.appendChild(this.dLoader);
        this.dContainer = dContainer;
      } else {
        throw new Error('No valid DOM element provided for chart.');
      }
    }

    /**
    * Sets the local config options for the chart.
    *
    * @method setConfig
    * @param {JSON Object} jConfig JSON configuration object
    * @throws {Error} missing configuration
    */

  }, {
    key: 'setConfig',
    value: function setConfig(jConfig) {
      if (jConfig && jConfig.toString() === '[object Object]') {
        this.jConfig = _extends({}, jConfig);
        if (this.aData) {
          this.transformDataKeys();
        }
      } else {
        throw new Error('No valid configuration provided for chart.');
      }
    }

    /**
    * Sets the local data for the chart.
    *
    * @method setData
    * @param {Array} aData array of JSON objects
    * @throws {Error} missing data
    */

  }, {
    key: 'setData',
    value: function setData(aData) {
      if (aData && Array.isArray(aData) === true) {
        this.aData = aData.slice(aData);
        if (this.jConfig) {
          this.transformDataKeys();
        }
      } else {
        throw new Error('No valid data provided for chart.');
      }
    }

    /**
    * Sets the local chart dimensions based on the size of the container.
    *
    * @method setDimensions
    * @throws {Error} missing DOM element
    */

  }, {
    key: 'setDimensions',
    value: function setDimensions() {
      if (this.dContainer && this.dContainer.nodeName) {
        this.iWidth = this.dContainer.clientWidth;
        this.iHeight = this.dContainer.clientHeight;
        this.iInnerWidth = this.iWidth - this.jPadding.l - this.jPadding.r;
        this.iInnerHeight = this.iHeight - this.jPadding.t - this.jPadding.b;
      } else {
        throw new Error('Cannot set dimensions of chart without container element.');
      }
    }

    /**
    * Maps custom data keys into standard structure.
    *
    * @method transformDataKeys
    */

  }, {
    key: 'transformDataKeys',
    value: function transformDataKeys() {
      var _this = this;

      if (this.jConfig.aValues || this.jConfig.aAxisKeys) {
        this.aData.map(function (hItem) {
          if (_this.jConfig.aValues && !hItem.aValues) {
            hItem.aValues = [];
            _this.jConfig.aValues.forEach(function (jValue) {
              hItem.aValues.push(hItem[jValue.sKey]);
            });
          }
          if (_this.jConfig.aAxisKeys && !hItem.sLabel) {
            hItem.sLabel = hItem[_this.jConfig.aAxisKeys[0]];
          }
          return hItem;
        });
        this.jConfig.aValues.map(function (jValue) {
          if (!jValue.sColour) {
            jValue.sColour = _colors2.default.getRandomColor();
          }
          jValue.oColour = d3.rgb(jValue.sColour);
          return jValue;
        });
      }
    }

    /**
    * Check chart is ready and render.
    *
    * @method init
    * @throws {Error} chart not ready for initialisation
    */

  }, {
    key: 'init',
    value: function init() {
      var _this2 = this;

      this.setDimensions();
      if (this.aData && this.jConfig && !isNaN(this.iWidth) && !isNaN(this.iHeight)) {
        this.iInitialWidth = this.iWidth;
        this.oToolTip = new _tooltip2.default(this.dContainer).create();
        d3.select(this.dContainer).append('div').attr('class', 'title').text(this.jConfig.sTitle);
        this.oSvg.setAttribute('class', 'chart');
        this.dContainer.appendChild(this.oSvg);
        this.oResizeWatcher = this.oResizeWatcher || window.addEventListener('resize', function () {
          _this2.setDimensions();
          _this2.iResizeOffset = _this2.iWidth - _this2.iInitialWidth;
          if (_this2.renderChart) {
            _this2.renderChart();
          }
          _this2.oToolTip.hide();
        });
        this.oChartOutWatcher = this.oChartOutWatcher || this.oSvg.addEventListener('mouseout', function () {
          _this2.oToolTip.hide();
        });
        if (this.renderChart) {
          this.renderChart();
        }
        this.dContainer.removeChild(this.dLoader);
      } else {
        throw new Error('The chart is not ready for initialisation.');
      }
    }
  }]);

  return Chart;
}();

exports.default = Chart;


module.exports = Chart;

/***/ }),

/***/ 175:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Key shows how the colours represent the data
*
* @class Key
* @constructor
*/
var Key = function () {

  /**
  * Constructor function that sets up the local object.
  *
  * @method constructor
  * @param {d3 Collection} d3Container A d3 wrapped container element
  * @param {Array} aValues the data to be displayed
  * @param {Integer} iOffsetX optional x offset
  * @param {Integer} iOffsetY optional y offset
  */
  function Key(_ref) {
    var d3Container = _ref.d3Container,
        aValues = _ref.aValues,
        _ref$iOffsetX = _ref.iOffsetX,
        iOffsetX = _ref$iOffsetX === undefined ? 0 : _ref$iOffsetX,
        _ref$iOffsetY = _ref.iOffsetY,
        iOffsetY = _ref$iOffsetY === undefined ? 0 : _ref$iOffsetY;

    _classCallCheck(this, Key);

    if (d3Container && aValues) {
      this.d3Container = d3Container;
      this.aValues = aValues.slice(aValues);
      this.iOffsetX = iOffsetX;
      this.iOffsetY = iOffsetY;
    } else {
      throw new Error('Incorrect parameters provided to Key constructor.');
    }
  }

  /**
  * Render the key showing the labels for the colour values
  *
  * @method render
  * @chainable
  */


  _createClass(Key, [{
    key: 'render',
    value: function render() {
      var _this = this;

      this.d3Container.selectAll('g.key').remove();
      var iGroupOffset = 0;
      var d3KeyGroup = this.d3Container.append('g').attr('class', 'key');
      var d3Labels = d3KeyGroup.selectAll('text.label').data(this.aValues);
      var fnCalculateMargin = function fnCalculateMargin(aValues, i) {
        var iMargin = 0;
        if (i) {
          for (var l = 0; l < i; l++) {
            iMargin += aValues[l].iLabelWidth;
          }
        }
        return iMargin;
      };
      d3Labels.enter().append('text').text(function (d) {
        return d.sName;
      }).each(function (d, i, nodes) {
        var iLabelWidth = nodes[i].getBoundingClientRect().width + 15;
        _this.aValues[i].iLabelWidth = iLabelWidth;
        iGroupOffset += iLabelWidth - 2;
      }).attr('class', 'label').attr('x', function (d, i) {
        return fnCalculateMargin(_this.aValues, i);
      }).attr('y', 8).attr('width', 10).attr('height', 10).attr('font-family', 'sans-serif').attr('font-size', '10px').attr('fill', '#222222');
      var d3Keys = d3KeyGroup.selectAll('rect.key').data(this.aValues);
      d3Keys.enter().append('rect').attr('class', 'key').attr('fill', function (d) {
        return d.sColour;
      }).attr('x', function (d, i) {
        return fnCalculateMargin(_this.aValues, i) - 12;
      }).attr('y', 0).attr('width', 10).attr('height', 10);
      iGroupOffset = this.iOffsetX - iGroupOffset / 2;
      d3KeyGroup.attr('transform', 'translate(' + iGroupOffset + ',' + this.iOffsetY + ')');
      return this;
    }
  }]);

  return Key;
}();

exports.default = Key;


module.exports = Key;

/***/ }),

/***/ 176:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = __webpack_require__(10);

var d3 = _interopRequireWildcard(_d);

var _utilities = __webpack_require__(91);

var _utilities2 = _interopRequireDefault(_utilities);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Axis object is used to instantiate x and y axes, as well as labels
*
* @class Axis
* @constructor
*/
var Axis = function () {

  /**
  * Constructor function which sets up the local object.
  *
  * @method constructor
  * @param {Object} oParams configuration parameters object
  * @throws {Error} invalid parameters
  */
  function Axis(oParams) {
    _classCallCheck(this, Axis);

    if (oParams.d3Container) {
      Object.assign(this, oParams);
    } else {
      throw new Error('Incorrect parameters provided to Axis constructor.');
    }
  }

  /**
  * Master render to call all rendering methods
  *
  * @method render
  * @chainable
  */


  _createClass(Axis, [{
    key: 'render',
    value: function render() {
      this.renderAxisX();
      this.renderAxisY();
      this.renderLabels();
      return this;
    }

    /**
    * Render only the x axis
    *
    * @method renderAxisX
    */

  }, {
    key: 'renderAxisX',
    value: function renderAxisX() {
      var _this = this;

      this.d3Container.selectAll('g.x-axis').remove();
      this.d3Container.append('g').attr('class', 'x-axis').call(d3.axisBottom(this.oScaleX)).attr('transform', 'translate(' + this.jPadding.l + ',' + this.iHeight + ')').selectAll('text').attr('x', -5).attr('y', 6).attr('transform', 'rotate(310)').attr('class', 'x-labels').text(function (d) {
        return _utilities2.default.truncateString(d, _this.iTruncate);
      }).style('text-anchor', 'end').on('mousemove', function (d) {
        if (_this.oToolTip && d.length > _this.iTruncate) {
          _this.oToolTip.ping('<strong>' + d + '</strong>');
        }
      });
    }

    /**
    * Render only the y axis
    *
    * @method renderAxisY
    */

  }, {
    key: 'renderAxisY',
    value: function renderAxisY() {
      var _this2 = this;

      this.d3Container.selectAll('g.y-axis').remove();
      this.d3Container.append('g').attr('class', 'y-axis').call(d3.axisLeft(this.oScaleY)).attr('transform', 'translate(' + this.jPadding.l + ',0)').selectAll('.y-axis .tick line').attr('x2', function () {
        return _this2.iWidth;
      });
    }

    /**
    * Render only the labels
    *
    * @method renderLabels
    */

  }, {
    key: 'renderLabels',
    value: function renderLabels() {
      this.d3Container.selectAll('text.labels').remove();
      this.d3Container.append('text').attr('class', 'labels').attr('x', this.iHeight / -2 - this.jPadding.t / 2) // - ((this.jConfig.aAxisLabels[0].length / 2) * 7))
      .attr('y', 10).attr('transform', 'rotate(-90)').attr('text-anchor', 'middle').text(this.aAxisLabels[0]);
      this.d3Container.append('text').attr('class', 'labels').attr('x', (this.iWidth + this.jPadding.l + this.jPadding.r) / 2) // - ((this.aAxisLabels[1].length / 2) * 2))
      .attr('y', this.iHeight + (this.jPadding.b - 5)).attr('text-anchor', 'middle').text(this.aAxisLabels[1]);
    }
  }]);

  return Axis;
}();

exports.default = Axis;


module.exports = Axis;

/***/ }),

/***/ 177:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _barChart = __webpack_require__(178);

var _barChart2 = _interopRequireDefault(_barChart);

var _lineChart = __webpack_require__(472);

var _lineChart2 = _interopRequireDefault(_lineChart);

var _bubbleChart = __webpack_require__(473);

var _bubbleChart2 = _interopRequireDefault(_bubbleChart);

var _utilities = __webpack_require__(91);

var _utilities2 = _interopRequireDefault(_utilities);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Theia is the main API for dTheia - a reusable charting library built using d3 v.4 and ES6
*
* @module Theia
*/

var Theia = {

  /**
  * Create a chart and return object
  *
  * @method chart
  * @param {String} sContainer ID to select container DOM object
  * @param {String} sType string denoting the type of chart
  * @param {Object} jParams includes target DOM object, JSON config and array of data
  * @return {Chart object} oChart returns a chart object of the requested type
  */
  chart: function chart(sContainer, sType, jParams) {
    var oChart = {};
    var oAllParams = _extends({ sContainer: sContainer, sType: sType }, jParams);
    switch (sType) {
      case 'line':
        {
          oChart = this.createLineChart(oAllParams);
          break;
        }
      case 'bubble':
        {
          oChart = this.createBubbleChart(oAllParams);
          break;
        }
      default:
        {
          oChart = this.createBarChart(oAllParams);
        }
    }
    return oChart;
  },


  /**
  * Create a bar chart and return object
  *
  * @method createBarChart
  * @param {Object} oParams contains the configuration for the chart
  * @return {BarChart object} returns a bar chart object
  */
  createBarChart: function createBarChart(oParams) {
    return new _barChart2.default(oParams).init();
  },


  /**
  * Create a line chart and return object
  *
  * @method createLineChart
  * @param {Object} oParams contains the configuration for the chart
  * @return {LineChart object} returns a line chart object
  */
  createLineChart: function createLineChart(oParams) {
    return new _lineChart2.default(oParams).init();
  },


  /**
  * Create a line chart and return object
  *
  * @method createBubbleChart
  * @param {Object} oParams contains the configuration for the chart
  * @return {BubbleChart object} returns a bubble chart object
  */
  createBubbleChart: function createBubbleChart(oParams) {
    return new _bubbleChart2.default(oParams).init();
  },


  /**
  * Return a public Utilities module
  *
  * @method getUtilities
  */
  getUtilities: function getUtilities() {
    return _utilities2.default;
  }
};

module.exports = Theia;

/***/ }),

/***/ 178:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _d = __webpack_require__(10);

var d3 = _interopRequireWildcard(_d);

var _axisChart = __webpack_require__(173);

var _axisChart2 = _interopRequireDefault(_axisChart);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* Create BarCharts from the supplied data, based on the JSON config.
*
* @class BarChart
* @extends AxisChart
* @constructor
*/
var BarChart = function (_AxisChart) {
  _inherits(BarChart, _AxisChart);

  function BarChart() {
    _classCallCheck(this, BarChart);

    return _possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments));
  }

  _createClass(BarChart, [{
    key: 'renderChart',


    /**
    * Render the chart including bars, axes and labels
    *
    * @method renderChart
    * @param {Boolean} bReset optionally reset the chart data
    */
    value: function renderChart(bReset) {
      var _this2 = this;

      _get(BarChart.prototype.__proto__ || Object.getPrototypeOf(BarChart.prototype), 'renderChart', this).call(this);
      var _jConfig = this.jConfig,
          aValues = _jConfig.aValues,
          _jConfig$sBarType = _jConfig.sBarType,
          sBarType = _jConfig$sBarType === undefined ? 'side' : _jConfig$sBarType;
      var iInnerHeight = this.iInnerHeight,
          oScaleX = this.oScaleX,
          oScaleY = this.oScaleY;

      var iBarWidth = oScaleX.bandwidth() / aValues.length;

      // Iterate through config value keys
      aValues.forEach(function (oValues, i) {
        var sColour = oValues.sColour;

        var iBarOffset = sBarType === 'side' ? iBarWidth * i : 0;
        // Reset bars data and clear graph
        if (bReset) {
          _this2.aBars[i] = _this2.d3ChartGroup.selectAll('rect.bars').data({});
          _this2.aBars[i].exit().remove();
          _this2.aBars[i] = undefined;
        }
        _this2.aBars = _this2.aBars || [];
        // Add bars for each value
        if (!_this2.aBars[i]) {
          // Bind bars data
          _this2.aBars[i] = _this2.d3ChartGroup.selectAll('rect.bars-' + i).data(_this2.aData);
          // Add new rect elements and set base attributes
          _this2.aBars[i].enter().append('rect').on('mousemove', function (d) {
            _this2.oToolTip.ping([d.sLabel, oValues.sName, d.aValues[i]]);
          }).on('mouseover', function (d) {
            d.oColour = _this2.jConfig.aValues[i].oColour;
            d3.select(d3.event.target).attr('fill', d.oColour.darker(1));
          }).on('mousedown', function (d) {
            if (_this2.jConfig.fnClickCallback) {
              _this2.jConfig.fnClickCallback({
                oEvent: d3.event,
                jData: d
              });
            }
          }).on('mouseout', function (d) {
            _this2.oToolTip.hide();
            d3.select(d3.event.target).attr('fill', d.oColour);
          }).attr('class', 'bars bars-' + i).attr('fill', sColour).attr('y', iInnerHeight).attr('height', 0);
        }

        // Update bars
        _this2.d3ChartGroup.selectAll('rect.bars-' + i).attr('x', function (d) {
          return oScaleX(d.sLabel) + iBarOffset;
        }).attr('width', iBarWidth).transition().ease(d3.easeLinear).duration(_this2.iTransitionTime).attr('y', function (d) {
          return oScaleY(d.aValues[i]);
        }).attr('height', function (d) {
          return iInnerHeight - oScaleY(d.aValues[i]);
        });
      });
    }
  }]);

  return BarChart;
}(_axisChart2.default);

exports.default = BarChart;


module.exports = BarChart;

/***/ }),

/***/ 469:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = __webpack_require__(10);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Tooltip
*
* @class Tooltip
* @constructor
*/
var Tooltip = function () {

  /**
  * Constructor function that sets up the local object.
  *
  * @method constructor
  * @param {DOM Element} oContainer DOM object
  */
  function Tooltip(oContainer) {
    _classCallCheck(this, Tooltip);

    if (oContainer.nodeName) {
      this.oContainer = oContainer;
    } else {
      throw new Error('The tooltip has no valid container element.');
    }
  }

  /**
  * Create the tooltip DOM and return object
  *
  * @method create
  * @chainable
  */


  _createClass(Tooltip, [{
    key: 'create',
    value: function create() {
      this.oTooltip = document.createElement('div');
      this.oTooltip.className = 'tooltip is-transparent is-hidden';
      this.oContainer.appendChild(this.oTooltip);
      return this;
    }

    /**
    * Ping the tooltip with data and location
    *
    * @method ping
    * @param {Integer} x Location of x tooltip position
    * @param {Integer} y Location of y tooltip position
    * @param {String} sContent inner html content
    */

  }, {
    key: 'ping',
    value: function ping(mContent) {
      var _this = this;

      var sContent = mContent.constructor === Array ? '<strong>' + mContent[0] + '</strong><br>' + mContent[1] + ': <em>' + mContent[2] + '</em>' : mContent;
      var iZoomDivider = 1 + (window.devicePixelRatio > 1 ? window.devicePixelRatio / 20 : 0);
      var oContainerEdges = this.oContainer.getBoundingClientRect();
      var iPageOffsetX = oContainerEdges.left - 15;
      var iPageOffsetY = oContainerEdges.top;
      this.oTooltip.innerHTML = sContent;
      this.oTooltip.className = 'tooltip is-transparent';
      this.oTooltip.className = 'tooltip';
      this.oTooltip.style.left = _d.event.clientX - iPageOffsetX + 'px';
      this.oTooltip.style.top = _d.event.clientY / iZoomDivider - iPageOffsetY + 'px';
      clearTimeout(this.oTooltipTimeout);
      clearTimeout(this.oTooltipSubTimeout);
      this.oTooltipTimeout = setTimeout(function () {
        _this.hide();
      }, 5000);
    }
  }, {
    key: 'hide',
    value: function hide() {
      var _this2 = this;

      clearTimeout(this.oTooltipTimeout);
      clearTimeout(this.oTooltipSubTimeout);
      this.oTooltip.className = 'tooltip is-transparent';
      this.oTooltipSubTimeout = setTimeout(function () {
        _this2.oTooltip.className = 'tooltip is-transparent is-hidden';
      }, 300);
    }
  }]);

  return Tooltip;
}();

exports.default = Tooltip;


module.exports = Tooltip;

/***/ }),

/***/ 470:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = __webpack_require__(10);

var _utilities = __webpack_require__(91);

var _utilities2 = _interopRequireDefault(_utilities);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Colors object is is a class containing reusable static methods
*
* @class Colors
*/
var Colors = function () {
  function Colors() {
    _classCallCheck(this, Colors);
  }

  _createClass(Colors, null, [{
    key: 'getRandomColor',


    /**
    * Returns a random color
    *
    * @method getRandomColor
    * @return {RGB object} randomly generated RGB object
    */
    value: function getRandomColor() {
      var iRGB = function iRGB() {
        return _utilities2.default.getRandomInteger(0, 255);
      };
      return (0, _d.rgb)(iRGB(), iRGB(), iRGB());
    }

    /**
    * Returns a random color palette
    *
    * @method getRandomPalette
    * @param {Integer} iLength the size of the palette
    * @return {Array} list of randomly generated RGB objects
    */

  }, {
    key: 'getRandomPalette',
    value: function getRandomPalette() {
      var iLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

      var iCount = iLength;
      var aPalette = [];
      while (iCount--) {
        aPalette.push(this.getRandomColor());
      }
      return aPalette;
    }

    /**
    * Returns a darker version of a color
    *
    * @method getDarkerColor
    * @param {RGB object} oColor RGB object
    * @return {RGB object} darker RGB object
    */

  }, {
    key: 'getDarkerColor',
    value: function getDarkerColor(oColor) {
      return oColor.darker(0.5);
    }
  }]);

  return Colors;
}();

module.exports = Colors;

/***/ }),

/***/ 472:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _d = __webpack_require__(10);

var d3 = _interopRequireWildcard(_d);

var _axisChart = __webpack_require__(173);

var _axisChart2 = _interopRequireDefault(_axisChart);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* Create LineCharts from the supplied data, based on the JSON config.
*
* @class LineChart
* @extends AxisChart
* @constructor
*/
var LineChart = function (_AxisChart) {
  _inherits(LineChart, _AxisChart);

  function LineChart() {
    _classCallCheck(this, LineChart);

    return _possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).apply(this, arguments));
  }

  _createClass(LineChart, [{
    key: 'renderChart',


    /**
    * Render the chart including lines, axes and labels
    *
    * @method renderChart
    */
    value: function renderChart() {
      var _this2 = this;

      _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'renderChart', this).call(this);
      var aValues = this.jConfig.aValues;
      var oScaleX = this.oScaleX,
          oScaleY = this.oScaleY;


      this.aLines = this.aLines || [];
      this.aCircles = this.aCircles || [];

      // Iterate through config value keys
      aValues.forEach(function (oValues, i) {
        var sColour = oValues.sColour;


        if (!_this2.aLines[i]) {
          // define the line
          _this2.aLines[i] = d3.line();

          // Add the valueline path.
          _this2.d3ChartGroup.append('path').data([_this2.aData]).attr('class', 'line lines-' + i).attr('stroke', sColour);
        }

        // Update lines
        _this2.aLines[i].x(function (d) {
          return oScaleX(d.sLabel) + oScaleX.bandwidth() / 2;
        }).y(function (d) {
          return oScaleY(d.aValues[i]);
        });
        _this2.d3ChartGroup.selectAll('path.lines-' + i).attr('d', _this2.aLines[i]);

        // Add circles for each value
        if (!_this2.aCircles[i]) {
          // Bind circles data
          _this2.aCircles[i] = _this2.d3ChartGroup.selectAll('circle.circles-' + i).data(_this2.aData);
          // Add new circle elements and set base attributes
          _this2.aCircles[i].enter().append('circle').on('mousemove', function (d) {
            _this2.oToolTip.ping([d.sLabel, oValues.sName, d.aValues[i]]);
          }).on('mouseover', function (d) {
            d.oColour = _this2.jConfig.aValues[i].oColour;
            d3.select(d3.event.target).attr('fill', d.oColour.darker(1));
          }).on('mousedown', function (d) {
            if (_this2.jConfig.fnClickCallback) {
              _this2.jConfig.fnClickCallback({
                oEvent: d3.event,
                jData: d
              });
            }
          }).on('mouseout', function (d) {
            _this2.oToolTip.hide();
            d3.select(d3.event.target).attr('fill', d.oColour);
          }).attr('class', 'circles circles-' + i).attr('fill', sColour).attr('r', 5).attr('cy', function (d) {
            return oScaleY(d.aValues[i]);
          });
        }

        // Update circles
        _this2.d3ChartGroup.selectAll('circle.circles-' + i).attr('cx', function (d) {
          return oScaleX(d.sLabel) + oScaleX.bandwidth() / 2;
        });
      });
    }
  }]);

  return LineChart;
}(_axisChart2.default);

exports.default = LineChart;


module.exports = LineChart;

/***/ }),

/***/ 473:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _d = __webpack_require__(10);

var d3 = _interopRequireWildcard(_d);

var _chart = __webpack_require__(174);

var _chart2 = _interopRequireDefault(_chart);

var _axis = __webpack_require__(176);

var _axis2 = _interopRequireDefault(_axis);

var _key = __webpack_require__(175);

var _key2 = _interopRequireDefault(_key);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* Create BubbleCharts from the supplied data, based on the supplied JSON config.
*
* @class BubbleChart
* @extends Chart
* @constructor
*/
var BubbleChart = function (_Chart) {
  _inherits(BubbleChart, _Chart);

  /**
  * Constructor function supersedes parent class.
  *
  * @method constructor
  * @param {Object} oParams same as Chart
  */
  function BubbleChart() {
    var oParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BubbleChart);

    var _this = _possibleConstructorReturn(this, (BubbleChart.__proto__ || Object.getPrototypeOf(BubbleChart)).call(this, oParams));

    _this.oScaleColour = d3.scaleLinear();
    return _this;
  }

  /**
  * Supersede the parent method to update local scaling objects
  *
  * @method setDimensions
  */


  _createClass(BubbleChart, [{
    key: 'setDimensions',
    value: function setDimensions() {
      var _this2 = this;

      _get(BubbleChart.prototype.__proto__ || Object.getPrototypeOf(BubbleChart.prototype), 'setDimensions', this).call(this);
      this.oScaleColour.domain([0, d3.max(this.aData, function (d) {
        return d[_this2.jConfig.aValues[1].sKey];
      })]).range(this.jConfig.aValues[1].aColours);
    }

    /**
    * Render the chart including bubbles, axes and labels
    *
    * @method renderChart
    */

  }, {
    key: 'renderChart',
    value: function renderChart() {
      var _this3 = this;

      var _jConfig = this.jConfig,
          aAxisLabels = _jConfig.aAxisLabels,
          aValues = _jConfig.aValues;
      var iInnerWidth = this.iInnerWidth,
          iInnerHeight = this.iInnerHeight,
          jPadding = this.jPadding;
      var _aValues$ = aValues[0],
          sKey1 = _aValues$.sKey,
          sName1 = _aValues$.sName;
      var _aValues$2 = aValues[1],
          sKey2 = _aValues$2.sKey,
          sName2 = _aValues$2.sName,
          aColours = _aValues$2.aColours;

      // Add chart scale axes

      this.d3AxisGroup = this.d3AxisGroup || this.d3Svg.append('g').attr('class', 'axes-g');
      this.oAxis = new _axis2.default({
        d3Container: this.d3AxisGroup,
        aAxisLabels: aAxisLabels,
        jPadding: jPadding,
        iWidth: iInnerWidth,
        iHeight: iInnerHeight - 25 }).renderLabels();

      // Add the group container for bubbles
      this.d3BubblesGroup = this.d3BubblesGroup || this.d3Svg.append('g').attr('transform', 'translate(' + this.jPadding.l + ', 0)');

      // The method runs on each tick of the force calculation to reposition the bubbles
      var fnTicked = function fnTicked() {
        _this3.d3BubblesGroup.selectAll('circle').attr('cx', function (d) {
          return d.x;
        }).attr('cy', function (d) {
          return d.y;
        });
      };

      // Initialise the d3 force calculations
      this.oForce = d3.forceSimulation().nodes(JSON.parse(JSON.stringify(this.aData))).force('charge', d3.forceManyBody().strength(function (d) {
        return d[sKey1] * (d[sKey1] / 2) / -150;
      })).force('center', d3.forceCenter(this.iWidth / 2, this.iHeight / 2)).on('tick', function () {
        fnTicked();
      });

      // Add circles for each value
      if (!this.d3Circles) {
        // Bind bars data
        this.d3Circles = this.d3BubblesGroup.selectAll('circle.circles').data(this.oForce.nodes());
        // Add new rect elements and set base attributes
        this.d3Circles.enter().append('circle').on('mousemove', function (d) {
          _this3.oToolTip.ping('<strong>' + d.sLabel + '</strong><br>' + sName1 + ': <em>' + d[sKey1] + '</em><br>' + sName2 + ': <em>' + d[sKey2] + '</em>');
        }).on('mouseout', function () {
          return _this3.oToolTip.hide();
        }).attr('class', 'circles').attr('fill', function (d) {
          return _this3.oScaleColour(d[sKey2]);
        }).attr('r', 0).transition().ease(d3.easeLinear).duration(this.iTransitionTime).attr('r', function (d) {
          return d[sKey1] / 2;
        });
      } else {
        this.d3BubblesGroup.attr('transform', 'translate(' + this.iResizeOffset / 2 + ', 0)');
      }

      // Render the key for the data
      this.oKey = new _key2.default({
        d3Container: d3.select(this.oSvg),
        aValues: [{
          sName: 0,
          sColour: aColours[0]
        }, {
          sName: this.oScaleColour.domain()[1],
          sColour: aColours[1]
        }],
        iOffsetX: this.iInnerWidth / 2 + this.jPadding.l + 10,
        iOffsetY: this.iHeight - 20,
        sType: 'range'
      }).render();
    }
  }]);

  return BubbleChart;
}(_chart2.default);

exports.default = BubbleChart;


module.exports = BubbleChart;

/***/ }),

/***/ 91:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

__webpack_require__(471);

/**
* The Utilities object is is a class containing reusable static methods
*
* @class Utilities
*/

var Utilities = function () {
  function Utilities() {
    _classCallCheck(this, Utilities);
  }

  _createClass(Utilities, null, [{
    key: 'getPromiseJSON',


    /**
    * Returns a promise resolving with JSON when supplied with a valid URL
    *
    * @method getPromiseJSON
    * @param {String} sUrl Required URL to make request
    * @throws {Error} invalid api string
    */
    value: function getPromiseJSON(sUrl) {
      if (typeof sUrl === 'string') {
        return new Promise(function (resolve, reject) {
          fetch(sUrl, {
            mode: 'no-cors'
          }).then(function (response) {
            response.json().then(function (data) {
              resolve(data);
            }).catch(function (error) {
              reject(error);
            });
          }).catch(function (error) {
            reject(error);
          });
        });
      }
      throw new Error('No valid data API string provided.');
    }

    /**
    * Truncates a string and adds ellipsis.
    *
    * @method truncateString
    * @param {String} sString string to be truncated
    * @param {Integer} iMaxLength max length of string before truncation
    * @return {String} truncated string
    */

  }, {
    key: 'truncateString',
    value: function truncateString(sString, iMaxLength) {
      if (sString.length > iMaxLength) {
        return sString.slice(0, iMaxLength - 3) + '[...]';
      }
      return sString;
    }

    /**
    * Generates a random integer within a range.
    *
    * @method getRandomInteger
    * @param {Integer} iMin minimum random value
    * @param {Integer} iMax max random value
    * @param {Integer} iOmit optional excempt integer
    * @return {Integer} new random integer
    */

  }, {
    key: 'getRandomInteger',
    value: function getRandomInteger(iMin, iMax, iOmit) {
      var iInt = Math.floor(Math.random() * (iMin - iMax - 1)) + iMax + 1;
      while (iInt === iOmit) {
        iInt = this.getRandomInteger(iMin, iMax);
      }
      return iInt;
    }

    /**
    * Returns a sample selection from an array (minmum length 3).
    *
    * @method sliceSampleData
    * @param {Array} aData the complete data set
    * @param {Integer} iMaxLength max length of sample
    * @return {Array} sliced section of data
    */

  }, {
    key: 'sliceSampleData',
    value: function sliceSampleData(aData) {
      var iMaxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;

      var iStart = this.getRandomInteger(0, aData.length - iMaxLength);
      var iEnd = iStart + this.getRandomInteger(3, iMaxLength);
      return aData.slice(iStart, iEnd);
    }

    /**
    * Returns random data and config for demo purposes.
    *
    * @method getRandomChart
    * @return {JSON} JSON style data structure
    */

  }, {
    key: 'getRandomData',
    value: function getRandomData() {
      var _this = this;

      var iLength = this.getRandomInteger(3, 10);
      var iGroupSize = this.getRandomInteger(1, 4);
      var iRangeLow = this.getRandomInteger(1, 50);
      var iRangeHigh = this.getRandomInteger(iRangeLow, 200);
      var jChart = {};
      jChart.jConfig = {
        sTitle: 'Random Chart Data',
        aAxisLabels: ['Y Axis', 'X Axis'],
        aValues: function () {
          var aValues = [];
          var iCounter = iGroupSize;
          while (iCounter--) {
            aValues.push({ sName: 'Type ' + (iGroupSize - iCounter) });
          }
          return aValues;
        }()
      };
      jChart.aData = function () {
        var aData = [];
        var iCounter = iLength;
        while (iCounter--) {
          aData.push({
            sLabel: 'Item ' + (iLength - iCounter),
            aValues: function () {
              var aValues = [];
              var iSubCounter = iGroupSize;
              while (iSubCounter--) {
                aValues.push(_this.getRandomInteger(iRangeLow, iRangeHigh));
              }
              return aValues;
            }()
          });
        }
        return aData;
      }();
      return jChart;
    }
  }]);

  return Utilities;
}();

module.exports = Utilities;

/***/ })

},[177]);